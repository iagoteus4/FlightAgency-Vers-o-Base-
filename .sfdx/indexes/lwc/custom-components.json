[{"_allAttributes":null,"_properties":null,"_methods":null,"file":"c:/Users/iagot/Desktop/Enviar para o git/Flgiht Agency/force-app/main/default/lwc/flightCalculator/flightCalculator.js","metadata":{"decorators":[{"type":"wire","targets":[{"type":"method","name":"aeroportosComComprovante","static":{},"params":{},"adapter":{"name":"obterAeroportos","reference":"@salesforce/apex/FlightController.getAeroportos"}}]},{"type":"track","targets":[{"name":"aeroportoPartida","type":"property"},{"name":"aeroportoChegada","type":"property"},{"name":"opcoesAeroportoPartida","type":"property"},{"name":"opcoesAeroportoChegada","type":"property"},{"name":"aeroportoPartidaSelecionado","type":"property"},{"name":"aeroportoChegadaSelecionado","type":"property"},{"name":"exibirDetalhesVoo","type":"property"},{"name":"infobotao","type":"property"},{"name":"distancia","type":"property"},{"name":"etapa","type":"property"}]}],"classMembers":[{"name":"aeroportoPartida","type":"property","value":{"type":"object","value":{}},"decorator":"track","doc":"*\r\n     * Componente: DetalhesVoo (Versão Base)\r\n     *\r\n     * Autor: José Iago Barbosa Alves\r\n     *  \r\n     * Descrição:\r\n     * Este componente LWC é responsável por exibir e gerenciar detalhes de um voo, incluindo informações sobre aeroportos\r\n     * de partida e chegada, seleções de aeroportos, cálculo de distância, e etapas do processo.\r\n     * \r\n     * Você pode acessar o documento de idealização desse sistema aqui: https://jade-nonah-44.tiiny.site/\r\n     * \r\n     * Propriedades:\r\n     * - @track aeroportoPartida: Objeto representando o aeroporto de partida.\r\n     * - @track aeroportoChegada: Objeto representando o aeroporto de chegada.\r\n     * - @track opcoesAeroportoPartida: Array de opções para seleção de aeroportos de partida.\r\n     * - @track opcoesAeroportoChegada: Array de opções para seleção de aeroportos de chegada.\r\n     * - @track aeroportoPartidaSelecionado: ID do aeroporto de partida selecionado.\r\n     * - @track aeroportoChegadaSelecionado: ID do aeroporto de chegada selecionado.\r\n     * - @track exibirDetalhesVoo: Flag indicando se os detalhes do voo devem ser exibidos.\r\n     * - @track infobotao: Flag indicando a visibilidade do botão de informações.\r\n     * - @track distancia: Distância calculada entre aeroportos de partida e chegada.\r\n     * - @track etapa: Representação da etapa atual do processo, com valor padrão '-3' (O valor padrão é usado para o icon vir vermelho, sua alteração para \"3\" faz ele virar verde).\r\n     * \r\n     * Uso Dinâmico de @track:\r\n     * A anotação @track é utilizada para rastrear automaticamente alterações nessas propriedades,\r\n     * permitindo que o componente reaja dinamicamente a mudanças e atualize a exibição conforme necessário.\r\n     * \r\n     * Funcionalidades Principais:\r\n     * - Carrega opções de aeroportos via Apex wire para opções de partida e chegada.\r\n     * - Verifica seleções de aeroportos, calcula distância e exibe detalhes do voo.\r\n     * - Utiliza @track para garantir a reatividade do componente às alterações nas propriedades.\r\n     * \r\n     * Maior problema durante o percurso:\r\n     * - Tive um problema em relação a operação DML de insert.\r\n     * - O log de erro me retornava um erro de \"Too Many DML Limit\" quando tentavar inserir os dados, no final era só uma notação que eu havia esquecido de tirar(Cacheable=true) do método\r\n     ","loc":{"start":{"line":45,"column":4},"end":{"line":45,"column":33}}},{"name":"aeroportoChegada","type":"property","value":{"type":"object","value":{}},"decorator":"track","loc":{"start":{"line":46,"column":4},"end":{"line":46,"column":33}}},{"name":"opcoesAeroportoPartida","type":"property","decorator":"track","loc":{"start":{"line":47,"column":4},"end":{"line":47,"column":39}}},{"name":"opcoesAeroportoChegada","type":"property","decorator":"track","loc":{"start":{"line":48,"column":4},"end":{"line":48,"column":39}}},{"name":"aeroportoPartidaSelecionado","type":"property","decorator":"track","loc":{"start":{"line":49,"column":4},"end":{"line":49,"column":39}}},{"name":"aeroportoChegadaSelecionado","type":"property","decorator":"track","loc":{"start":{"line":50,"column":4},"end":{"line":50,"column":39}}},{"name":"exibirDetalhesVoo","type":"property","value":{"type":"boolean","value":false},"decorator":"track","loc":{"start":{"line":51,"column":4},"end":{"line":51,"column":37}}},{"name":"infobotao","type":"property","value":{"type":"boolean","value":true},"decorator":"track","loc":{"start":{"line":52,"column":4},"end":{"line":52,"column":28}}},{"name":"distancia","type":"property","decorator":"track","loc":{"start":{"line":53,"column":4},"end":{"line":53,"column":21}}},{"name":"etapa","type":"property","decorator":"track","loc":{"start":{"line":54,"column":4},"end":{"line":54,"column":24}}},{"name":"aeroportosComComprovante","type":"method","decorator":"wire","loc":{"start":{"line":57,"column":4},"end":{"line":66,"column":5}}},{"name":"mapearParaOpcoes","type":"method","doc":"*\r\n     * Método: mapearParaOpcoes\r\n     * Converte a lista de aeroportos em opções utilizadas nos componentes de seleção.\r\n     * \r\n     * @param {Object[]} data - Lista de aeroportos.\r\n     * @returns {Object[]} - Lista de opções de aeroportos.\r\n     ","loc":{"start":{"line":75,"column":4},"end":{"line":80,"column":5}}},{"name":"verificarInformacoes","type":"method","doc":"*\r\n     * Método: verificarInformacoes\r\n     * Verifica as seleções de aeroportos e atualiza os atributos correspondentes.\r\n     ","loc":{"start":{"line":86,"column":4},"end":{"line":138,"column":5}}},{"name":"calcularDistanciaPromise","type":"method","doc":"*\r\n     * Método: calcularDistanciaPromise\r\n     * Calcula a distância entre dois pontos geográficos de forma assíncrona.\r\n     * \r\n     * @param {number} latitude1 - Latitude do ponto de partida.\r\n     * @param {number} longitude1 - Longitude do ponto de partida.\r\n     * @param {number} latitude2 - Latitude do ponto de chegada.\r\n     * @param {number} longitude2 - Longitude do ponto de chegada.\r\n     * @returns {Promise<number>} - Promise com a distância calculada em metros.\r\n     ","loc":{"start":{"line":150,"column":4},"end":{"line":154,"column":5}}},{"name":"handleAeroportoPartidaChange","type":"method","doc":"*\r\n     * Método: handleAeroportoPartidaChange\r\n     * Manipula a alteração do aeroporto de partida selecionado(Acionado no fim da seleção).\r\n     * \r\n     * @param {object} event - Objeto que representa o evento de alteração.\r\n     *                       - Contém detalhes sobre a alteração, como o novo valor selecionado.\r\n     ","loc":{"start":{"line":163,"column":4},"end":{"line":172,"column":5}}},{"name":"handleAeroportoChegadaChange","type":"method","doc":"*\r\n     * Método: handleAeroportoChegadaChange\r\n     * Manipula a alteração do aeroporto de chegada selecionado(Acionado no fim da seleção).\r\n     * \r\n     * @param {object} event - Objeto que representa o evento de alteração.\r\n     *                       - Contém detalhes sobre a alteração, como o novo valor selecionado.\r\n     ","loc":{"start":{"line":181,"column":4},"end":{"line":190,"column":5}}},{"name":"handleSalvarVoo","type":"method","doc":"*\r\n     * Método: handleSalvarVoo\r\n     * Manipula o salvamento de informações do voo (Acionado ao clicar no botão).\r\n     * Verifica se há detalhes do voo a serem salvos, como distância, aeroporto de partida e chegada.\r\n     * Chama o método assíncrono salvarPromise para efetuar o salvamento e exibe mensagens correspondentes.\r\n     ","loc":{"start":{"line":198,"column":4},"end":{"line":217,"column":5}}},{"name":"salvarPromise","type":"method","doc":"*\r\n     * Método: salvarPromise\r\n     * Salva informações do voo de forma assíncrona usando um método Apex.\r\n     * \r\n     * @param {string} partidaID - ID do aeroporto de partida.\r\n     * @param {string} chegadaID - ID do aeroporto de chegada.\r\n     * @param {number} distance - Distância do voo.\r\n     * @returns {Promise<boolean>} - Promise que resolve com true se o salvamento der certo.\r\n     *                             - Rejeita com um erro em caso de falha.\r\n     ","loc":{"start":{"line":229,"column":4},"end":{"line":242,"column":5}}},{"name":"obterDetalhesAeroportoPromise","type":"method","doc":"*\r\n     * Método: obterDetalhesAeroportoPromise\r\n     * Obtém detalhes de um aeroporto com base em seu ID de forma assíncrona.\r\n     * \r\n     * @param {string} idAeroporto - ID do aeroporto a ser consultado.\r\n     * @returns {Promise<Object>}  - Promise com detalhes do aeroporto.\r\n     *                             - Em caso de sucesso, resolve com um objeto contendo Name, Id, CodIata, Latitude e Longitude.\r\n     *                             - Em caso de falha, rejeita com uma mensagem de erro.\r\n     ","loc":{"start":{"line":253,"column":4},"end":{"line":276,"column":5}}},{"name":"mostrarMensagem","type":"method","doc":"*\r\n     * Método: mostrarMensagem\r\n     * Exibe uma mensagem toast na interface do usuário.\r\n     * \r\n     * @param {string} titulo - Título da mensagem.\r\n     * @param {string} variante - Variante da mensagem (success, error, etc.).\r\n     * @param {string} mensagem - Conteúdo da mensagem.\r\n     ","loc":{"start":{"line":286,"column":4},"end":{"line":293,"column":5}}}],"declarationLoc":{"start":{"line":8,"column":0},"end":{"line":294,"column":1}},"doc":"","exports":[{"type":"ExportDefaultDeclaration"}]},"updatedAt":"2023-11-25T04:55:45.596Z"}]